* aod-eval-in-repl
  My mod of org-babel-eval-in-repl & eval-in-repl packages

* Demo
  #+begin_src sh :session *shell1*
echo hi shell1
  #+end_src

  #+begin_src sh :session *shell2*
echo hi shell2
  #+end_src
* Templates

  #+begin_src emacs-lisp
(setq-local aod.eir/templates
	    '((foo . ((:replace . "z=1") )))
	    )
  #+end_src

  #+RESULTS:
  | foo | (:replace . z=1) |

  #+begin_src sh :template foo :replace x="y"
echo x z # echoes y 1
  #+end_src
* Shell & sql
  #+begin_src sh :session *psql* :shell-type term
# to use postgres:
sudo apt-get install postgresql postgresql-contrib
# switch over to postgres user
sudo -i -u postgres
psql
  #+end_src

  #+begin_src sql :session *psql*
CREATE TABLE temp(id SERIAL, name VARCHAR);

select * from temp;

select * from temp
where id > 1;

  #+end_src

* Python
  TODO have to always pass :session *Python* for now.
  I guess a need an alist with lang : default session (aka buffer name)

  #+begin_src python
1+2+3
print("hi default python")
  #+end_src

  #+begin_src python :session *my-python*
1+2
print("hi my python")
  #+end_src

* vars and :dir
  #+begin_src sh :session *demo-vars-dir* :var a=1 b=(read-string "b: ") :dir (read-directory-name "dir:")
echo a is $a b is $b and dir is $(pwd)
  #+end_src

* replace
  #+begin_src sh :session *demo-replace* :replace aa="hello" bb="there"
echo aa bb
  #+end_src

  #+begin_src sh :session *demo-replace* :replace bb=(read-string "bb: ")
echo aa bb
  #+end_src
* elaboreexample: replace multiline noweb
  #+name: json
  #+begin_src js :replace TIMESTAMP=(time-convert nil 'integer)
{
    "foo": "bar",
    "timestamp": TIMESTAMP
}
  #+end_src

  #+name: sh-heredoc
  #+begin_src emacs-lisp :var block="" opts=()
(format "$(cat <<EOF\n%s\nEOF\n)" (aod.eir/block-contents-replaced block opts))
  #+end_src

  #+begin_src sh :session *demo-heredoc* :replace JSON=sh-heredoc(block="json") foo="world"
json=JSON

echo $json

echo hi FOO
  #+end_src


  and here we pass the replacement ourselves with =read-number=
  #+begin_src sh :session *demo-heredoc* :replace JSON=sh-heredoc(block="json",opts='((:replace . "TIMESTAMP=(read-number \"timestamp:\")"))) foo="world"
json=JSON

echo $json

echo hi FOO
  #+end_src

  another way:

  #+name: sh-escape
  #+begin_src emacs-lisp :var block="" opts=()
(replace-regexp-in-string "\"" "\\\"" (aod.eir/block-contents-replaced "json") 'fixed 'literal)
  #+end_src

  #+begin_src sh :session *demo-heredoc* :replace JSON=sh-escape(block="json")
json="JSON"

echo "JSON" | jq
  #+end_src

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
* TODO read-string with memory
  there's a =history= argument.
  spin of aod.eir/read* variants which store in a alist/hashtable under the
  - key (prompt)
  the given input. so whenever the minibuffer opens up, you cycle through values that you previously gave
* init body
  :PROPERTIES:
  :header-args: sh :init *shell-a*=init-a *shell-b*=init-b
  :END:

  The init blocks: to be placed somewhere up in the document with all the inits:
  #+name: init-a
  #+begin_src sh :replace IN=(read-string "shell-a special var:")
shell_id="shell-a"
echo "hello from a"
special_var=IN
  #+end_src

  #+name: init-b
  #+begin_src sh
shell_id="shell-b"
echo "hello from b"
  #+end_src

  The actual shells:
  #+begin_src sh :session *shell-a*
echo "i am in a"
echo "shell is $shell_id and my special var $special_var"
  #+end_src

  #+begin_src sh :session *shell-b*
echo "i am in b"
echo shell is $shell_id
  #+end_src
* Replace: no-ref or other body
  #+name: foo
  #+begin_src sh
echo "hi from foo"
  #+end_src

  #+name: get-foo
  #+begin_src sh
echo "--foo--"
  #+end_src

  #+begin_src sh :replace do_foo=foo get_foo=get-foo()
# here we just insert the src
do_foo

# here get_foo is replace with the RESULT of evaluating get-foo()
echo foo is get_foo
  #+end_src
* js
  #+begin_src sh :session *js*
node
  #+end_src

  #+begin_src js :session *js*
let x = 1;
let y = 3;

let foo = (x, y) => {
    console.log({x, y});
    return x + y;
}

foo(x, y);
  #+end_src
* DONE minor mode: help-echo src block properties
  <2021-02-19 Fri> DONE with font-lock-add-keywords
  (aod.eir/opts)
  define minor mode to help-echo a src block calculated properties
  face: org-block-begin-line
* replacing functions in dynamic scope
  https://endlessparentheses.com/understanding-letf-and-how-it-replaces-flet.html
  #+begin_src emacs-lisp
(cl-letf (((symbol-function 'foo) (lambda ()
				    (progn
				      (message "replaced :)")))))
  (do-something-that-calls-foo))
  #+end_src
