* Removing hooks
  Let's say I added a lambda function that is giving errors
  #+BEGIN_SRC emacs-lisp

(add-hook 'clojure-mode-hook
	  (lambda ()
	    (message "how do i remove myself??")))


clojure-mode-hook
(first clojure-mode-hook)

(remove-hook 'clojure-mode-hook (first clojure-mode-hook))
  #+END_SRC
* profiling time of each block
  + https://emacs.stackexchange.com/a/21251/19673

  #+BEGIN_SRC emacs-lisp
(defmacro with-timer (title &rest forms)
  "Run the given FORMS, counting the elapsed time.
A message including the given TITLE and the corresponding elapsed
time is displayed."
  (declare (indent 1))
  (let ((nowvar (make-symbol "now"))
        (body   `(progn ,@forms)))
    `(let ((,nowvar (current-time)))
       (message "%s..." ,title)
       (prog1 ,body
         (let ((elapsed
                (float-time (time-subtract (current-time) ,nowvar))))
           (message "%s... done (%.3fs)" ,title elapsed))))))



  #+END_SRC
** COMMENT playing with use-package
   #+BEGIN_SRC emacs-lisp

(defalias 'use-package-old 'use-package)
(defmacro use-package (&rest forms)
  (declare (indent 1))
  (let ((nowvar (make-symbol "now"))
        (body   `(progn (use-package-old ,@forms)))
	(package (symbol-name (first forms)))
	)
    `(let ((,nowvar (current-time)))
       (message "use-package: %s..." ,package)
       (prog1 ,body
         (let ((elapsed
                (float-time (time-subtract (current-time) ,nowvar))))
           (message "%s... done (%.3fs)" ,package elapsed))))))

(macroexpand-all '(use-package-old helm))
(macroexpand-1 '(use-package2 helm))
(use-package helm)
(macroexpand-all '(with-timer "test " (+ 1 2)))
   #+END_SRC
* Highlighting thing under cursor etc..
  + M-x highlight-symbol-at-point
    or add C-u prefix to select what color shall be used
  + M-x unhighlight-regexp
    to remove highlights.. gives you a list of what is already highlighted. nice!
* listing edited buffers
  see https://www.reddit.com/r/emacs/comments/6w1kqi/listing_unsaved_buffers/dm4sizy/
  + run =ibuffer=
  + run =ibuffer-filter-by-modified=
    would be nice here to only show actual files (and no \*minibuffer\* etc)
* TODO about emacs 27.1
  + tab bar (per window and per frame)
    https://www.emacswiki.org/emacs/TabBarMode
    could add button in specific buffers (per window) for certain actions?
    eg
    + in cider : addbutton for clear cider buffer
  + [X] so-long (There is a complete section later with comments about this)
    https://www.emacswiki.org/emacs/SoLong
    optimization for long lines bringing emacs to its knees
* Spelling
** Windows setup
* ober eval in repl & vars
  :PROPERTIES:
  :header-args: :session *test* :var test="abc" test2="def" :dir ~/dev
  :END:

  #+BEGIN_SRC sh :dir ~/dev
pwd
  #+END_SRC

  #+RESULTS:
  |                        |
  | $ $ /home/actondev/dev |

  #+begin_src sh :session *shell*
echo hi from shell
  #+end_src

  The problem is that upon initializing the session, $test is not defined

  This is how we can get the assignments
  #+BEGIN_SRC emacs-lisp

(org-babel-expand-body:generic
 nil
 nil
 (org-babel-variable-assignments:shell (nth 2 (org-babel-get-src-block-info))))

(org-babel-variable-assignments:shell (nth 2 (org-babel-get-src-block-info)))
  #+END_SRC


** dir
   [[file:/usr/share/emacs/26.3/lisp/org/ob-core.el.gz::(default-directory]]
   in org-babel-execute-src-block

* Header args
  https://orgmode.org/manual/Using-Header-Arguments.html

  For a subheading add
  #+BEGIN_EXAMPLE
  :PROPERTIES:
  :header-args:sh: :session *test* :var test="abc" test2="def" :dir ~/dev
  :END:
  #+END_EXAMPLE

  for all the document

  #+BEGIN_EXAMPLE
#+PROPERTY: header-args:R  :session *R*
  #+END_EXAMPLE
  there's also the =header-args+=
  or add a + afther the =begin_src lang=

  results:
  - silent
  - replace (default)
* Advices (example for org-babel-get-serc-block-info)
  For my work on https://github.com/diadochos/org-babel-eval-in-repl/issues/31
  #+BEGIN_SRC emacs-lisp
(defun aod.org/src-info-light ()
  "Returns the src-block-info without evaluating anything.
   While passing 'light to org-babel-get-src-block-info makes the
   :var definitions not evaluate any lisp expressions, other
   things (like :dir for example) get evaluated.

   For example, the following org src header would cause the
   elisp to be evaluated everytime upon calling
   org-babel-get-src-block-info

   :dir (read-directory-name \"dir name:\")"
  (cl-flet ((read-advice (read-orig in &rest _)
			 (funcall read-orig in 'inhibit-lisp-eval)))
    (advice-add 'org-babel-read :around #'read-advice)
    (let ((info (org-babel-get-src-block-info 'light)))
      (advice-remove 'org-babel-read #'read-advice)
      info)))  
  #+END_SRC
* Profiling startup time
  https://blog.d46.us/advanced-emacs-startup/
  #+BEGIN_SRC emacs-lisp
(use-package esup
  :ensure t
  ;; To use MELPA Stable use ":pin mepla-stable",
  :pin melpa
  :commands (esup))
  #+END_SRC

* windows: bash & cmd - enter once in cmd
  #+BEGIN_SRC sh
[[ -z "$home" ]] && cmd
  #+END_SRC

* Local variables - running code on open
  for example, in an org-mode file I had
  #+BEGIN_EXAMPLE org

# Local Variables:
# org-confirm-babel-evaluate: nil
# eval: (aod.org-babel/eval-named-block "buttons")
# eval: (org-babel-goto-named-result "buttons")
# End:

  #+END_EXAMPLE

  the =(org-babel-goto-named-result "buttons")= though doesn't work.
  Upon opening the file the cursor is at the beginning
* Editing example src code
  org-edit-src-code
  #+BEGIN_SRC elisp
(let ((lang
       (if (eq type 'src-block) (org-element-property :language (org-element-at-point))
	 "example"))
      ;; ...
      )
  #+END_SRC

  #+BEGIN_SRC c
printf("hi");
  #+END_SRC

  =(org-element-at-point)= gives
  #+BEGIN_SRC elisp
(src-block (:language "c" :switches nil :parameters nil :begin 3682 :end 4317 :number-lines nil ...))  
  #+END_SRC

  #+BEGIN_EXAMPLE c
printf("hi");
  #+END_EXAMPLE

  gives

  #+BEGIN_SRC elisp
(example-block (:begin 5614 :end 5663 :value "printf(\"hi\");
" :switches "c" :number-lines nil :preserve-indent nil ...))
  #+END_SRC
* org babel notes
  disable confirming:
  =org-confirm-babel-evaluate=
  (setq-local to set on certain buffer)
  - org-babel-use-quick-and-dirty-noweb-expansion
    ??
** noweb, templating etc

   #+NAME: c-template
   #+BEGIN_SRC c :noweb yes
printf("hi, A is {A} and B is {B}");
   #+END_SRC

   #+NAME: c-template2
   #+BEGIN_SRC c :noweb yes
printf("hi, A is {A} and B is {B}");
<<render2(a="another a",b="another b")>>
   #+END_SRC

   #+NAME: render
   #+BEGIN_SRC emacs-lisp :var template="c-template" a="value_a" b="value_b" :wrap SRC cpp
(-as-> (aod.org/src-block-content template) x
       (replace-regexp-in-string (regexp-quote "{A}") a x t)
       (replace-regexp-in-string (regexp-quote "{B}") b x t)
       )
   #+END_SRC

   #+RESULTS: render
   #+BEGIN_SRC cpp
printf("hi, A is value_a and B is value_b");
   #+END_SRC


   This cause an infinite recursion!
   #+NAME: render2
   #+BEGIN_SRC emacs-lisp :var template="c-template2" a="value_a" b="value_b" :wrap SRC cpp
(-as-> (aod.org/src-block-content-noweb template) x
       (replace-regexp-in-string (regexp-quote "{A}") a x t)
       (replace-regexp-in-string (regexp-quote "{B}") b x t)
       )
   #+END_SRC


*** nested.. example
    #+NAME: expand
    #+BEGIN_SRC emacs-lisp :var template="the-template" c-type="bool"
(-as-> (aod.org/src-block-content-noweb template) x
       (replace-regexp-in-string "C_TYPE" c-type x t)
       )
    #+END_SRC

    #+NAME: T-struct
    #+BEGIN_SRC c
typedef struct {
     size_t size;
     C_TYPE* elements;
} C_TYPE_arr;
    #+END_SRC

    #+NAME: T-struct+
    #+BEGIN_SRC c :noweb yes
// here we see the struct for C_TYPE
<<T-struct>>
    #+END_SRC

    #+NAME: render-structs
    #+BEGIN_SRC emacs-lisp :wrap src c
(mapconcat
 (lambda (type)
   (-as-> (aod.org/src-block-content-noweb "T-struct+") x
	  (replace-regexp-in-string "C_TYPE" type x t)
	  ))
 (list "bool" "int" "float")
 "\n\n")
    #+END_SRC


    #+BEGIN_SRC c :noweb yes
// and.. fuclly expanded here

<<render-structs()>>

  // we did it!
  // run org-babel-expand-src-block to see the result


    #+END_SRC

    gives
    #+BEGIN_EXAMPLE c
// and.. fuclly expanded here

// here we see the struct for bool
typedef struct {
     size_t size;
     bool* elements;
} bool_arr;

// here we see the struct for int
typedef struct {
     size_t size;
     int* elements;
} int_arr;

// here we see the struct for float
typedef struct {
     size_t size;
     float* elements;
} float_arr;

  // we did it!
  // run org-babel-expand-src-block to see the result

    
    #+END_EXAMPLE
** header flags
   - :main no
     in C blocks
   - :noweb-ref foo
     instead of naming the blocks..? it's an option
** TODO COMMENT org-babel src block and window excursion
   https://emacs.stackexchange.com/a/42101

   feels hacky though.. 
   I need to try to do something with defadvice etc
   #+BEGIN_SRC emacs-lisp
(require 'ob-emacs-lisp)
(defun transform-tree (tree trafo)
  "Transform TREE by TRAFO."
  (let ((next tree))
    (while next
      (let ((this next))
	(setq next (cdr next))
	(if (consp (car this))
	    (transform-tree (car this) trafo)
	  (funcall trafo this)))))
  tree)

(defun replace-in-fundef (fun sym &rest replacement)
  "In function FUN perform REPLACEMENT."
  (setq fun (or
	     (condition-case err
		 (let* ((pos (find-function-noselect fun t))
			(buf (car pos))
			(pt (cdr pos)))
		   (with-current-buffer buf
		     (save-excursion
		       (goto-char pt)
		       (read buf))))
	       (error nil))
	     (and (symbolp fun) (symbol-function fun))
	     fun))
  (transform-tree fun
		  (lambda (this)
		    (when (eq (car this) sym)
		      (let ((copy-repl (cl-copy-list replacement)))
			(setcdr (last copy-repl) (cdr this))
			(setcdr this (cdr copy-repl))
			(setcar this (car copy-repl)))))))

(defmacro save-window-excursion-if (pred &rest body)
  "Act like `save-window-excursion' if PRED is non-nil."
  (declare (indent 1) (debug t))
  (let ((c (make-symbol "wconfig")))
    `(let ((,c (and ,pred (current-window-configuration))))
       (unwind-protect (progn ,@body)
         (when ,c (set-window-configuration ,c))))))

(advice-remove 'org-babel-execute:emacs-lisp #'ad-org-babel-execute:emacs-lisp)
;; make sure we have access to the source code of `org-babel-execute:emacs-lisp'
(find-function-noselect 'org-babel-execute:emacs-lisp t)
;; (defun ad-org-babel-execute:emacs-lisp ...):
(eval (replace-in-fundef 'org-babel-execute:emacs-lisp 'org-babel-execute:emacs-lisp 'ad-org-babel-execute:emacs-lisp))
;; Use `save-window-excursion-if' in `ad-org-babel-execute:emacs-lisp':
(declare-function 'ad-org-babel-execute:emacs-lisp " ")
(eval (replace-in-fundef 'ad-org-babel-execute:emacs-lisp
			 'save-window-excursion 'save-window-excursion-if '(null (member (cdr (assoc :keep-windows params)) '("yes" "t")))))
;; Replace `org-babel-execute:emacs-lisp':
(advice-add 'org-babel-execute:emacs-lisp :override #'ad-org-babel-execute:emacs-lisp)   
   #+END_SRC
* DONE <2020-11-13 Fri> quelpa and fucking paredit
  Solution: =el-get=
  Cloning https://github.com/actondev/eval-in-repl.git to /home/actondev/.emacs.d/quelpa/build/eval-in-repl/

  Cloning https://github.com/magnars/dash.el.git
  Cloning https://mumble.net/~campbell/git/paredit.git to /home/actondev/.emacs.d/quelpa/build/paredit/
  Entering debugger...
* <2020-11-24 Tue> vterm : helm-show-kill-ring
  cannot paste from helm kill ring into vterm

  possible solution (have to modify code ofcourse)
  #+begin_src emacs-lisp
(defun vterm-counsel-yank-pop-action (orig-fun &rest args)
  (if (equal major-mode 'vterm-mode)
      (let ((inhibit-read-only t)
            (yank-undo-function (lambda (_start _end) (vterm-undo))))
        (cl-letf (((symbol-function 'insert-for-yank)
		   (lambda (str) (vterm-send-string str t))))
          (apply orig-fun args)))
    (apply orig-fun args)))

(advice-add 'counsel-yank-pop-action :around #'vterm-counsel-yank-pop-action)

  #+end_src
  
  from https://github.com/akermu/emacs-libvterm/blob/a896799/README.md
  "=counsel-yank-pop= doesn't work" section

  this snippet could be useful for other things as well (the =cl-letf= and =symbol-function=)
* overriding function & referring to the original one
  https://stackoverflow.com/a/25249318
* TODO doom-emacs: what are they doing with the repl?
  https://github.com/hlissner/doom-emacs/issues/2496
* TODO org-roam
  - https://emacsconf.org/2020/talks/16/
* TODO directory local variables
  https://seandavi.github.io/post/2018-12-08-directory-local-variables-for-custom-emacs-projects/
* TODO merging header args
  #+begin_src emacs-lisp
org-babel-get-src-block-info
;; calls
;; gets the parent/document args
(org-babel-params-from-properties "sql" t)

;; which calls
org-babel-merge-params ;; is where :var is handled differently etc

(org-element-property :parameters (org-element-context))


(org-entry-get (point) "header-args")
(org-entry-get-with-inheritance "header-args")
(org--property-global-value "header-args")
org-file-properties
  #+end_src
* jump to matching closing tag brace
  https://stackoverflow.com/a/31736858/8720686
  writing this cause I always forget it
  - C-M-n
    forward-list
  - C-M-b

    #+begin_quote
    C-M-n forward-list Move forward over a parenthetical group

    C-M-p backward-list Move backward over a parenthetical group

    C-M-f forward-sexp Move forward over a balanced expression

    C-M-b backward-sexp Move backward over a balanced expression

    C-M-k kill-sexp Kill balanced expression forward

    C-M-SPC mark-sexp Put the mark at the end of the sexp.
    #+end_quote
* TODO org-mode inheriting properties
  see org-use-property-inheritance
* long lines
  summary:
  #+begin_src emacs-lisp
(global-so-long-mode 1)  
  #+end_src
  introduced in emacs 27.1

  Avoid performance issues in files with very long lines.
  - https://emacs.stackexchange.com/questions/598/how-do-i-prevent-extremely-long-lines-making-emacs-slow
  - https://github.com/codygman/figure-out-emacs-long-lines-issue/blob/master/figuring-out-emacs-display-issues.org
  other possible things to consider:
 
  - (add-hook 'backtrace-mode-hook 'so-long-minor-mode)
    https://www.reddit.com/r/emacs/comments/ccoksw/solong_mitigating_slowness_due_to_extremely_long

  if the file is indeed aweful (
  #+begin_src sh
wget https://github.com/Wilfred/ReVo-utilities/blob/a4bdc40dd2656c496defc461fc19c403c8306d9f/revo-export/dictionary.json?raw=true -O one_line.json  
  #+end_src

  then try
  #+begin_src emacs-lisp
(require 'longlines)
(longlines-mode)
  #+end_src

  saw this in so-long.el. gives a warning though that =Package
  longlines is deprecated=. quoting so-long.el
  #+begin_quote
  performance may still degrade as you get deeper into the long
  lines.  In such circumstances you may find that `longlines-mode' is
  the most helpful facility.
  #+end_quote

  longlines-mode help:
  #+begin_quote
  When Long Lines mode is enabled, long lines are wrapped if they
  extend beyond ‘fill-column’ - makes the file readonly
  #+end_quote
  
* TODO smooth scrolling?
  https://github.com/io12/good-scroll.el
  the built-in pixel-scroll-mode feels slow
* TODO repl & DEV/PROD/STAGING
  #+begin_src emacs-lisp
(get-buffer-window "*PROD-foo*" t)

;; returns nil if buffer is not shown.. handle it?
  #+end_src

* Get frame by name
* <2021-04-21 Wed> ideas
  - visual fill column
    https://www.youtube.com/watch?v=9i_9hse_Y08
    width, center text vars

* helm-find-files & cache
  - =C-c C-u= runs helm-refresh (run this when in a helm dialog!)
    fixes some inotify issues etc
