* Elisp
  Some functions that help :)
* Basic functionality

  #+BEGIN_SRC emacs-lisp
(defun save-as (new-filename)
  "Save current buffer to a new file.
  Credits https://stackoverflow.com/questions/5168262/emacs-write-buffer-to-new-file-but-keep-this-file-open"
  (interactive "FFilename:")
  (save-restriction
    (widen)
    (write-region (point-min) (point-max) new-filename))
  (find-file-noselect new-filename)
  )  
  #+END_SRC
* Manipulating lists
  #+BEGIN_SRC emacs-lisp
(defun xah-filter-list (@predicate @sequence)
  "Return a new list such that *predicate is true on all members of *sequence.
URL `http://ergoemacs.org/emacs/elisp_filter_list.html'
Version 2016-07-18"
  (delete
   "e3824ad41f2ec1ed"
   (mapcar
    (lambda ($x)
      (if (funcall @predicate $x)
          $x
        "e3824ad41f2ec1ed" ))
    @sequence)))
  #+END_SRC
* Org-mode
** various
   I had these at functions.el
   #+BEGIN_SRC emacs-lisp :results silent
(defun aod.org/insert-src (mode)
  "Insert a new source block and start editing it in its own editor
  TODO
  - see auto-mode-alist : would be nice to have completion for the mode"
  (interactive "sMode:")
  (message (format "selected mode %s" mode))
  (indent-according-to-mode)
  (insert (format "#+BEGIN_SRC %s" mode))
  (newline)
  (save-excursion
    (newline-and-indent)
    (insert "#+END_SRC"))
  (org-edit-special))

(defun aod.org/goto-end-of-src-block ()
  (interactive)
  (search-forward "#+END_SRC")
  (indent-new-comment-line))

(defun aod.org/eval-elisp ()
  "Evaluates current org-babel src block without asking.
  Plus, it doesn't use the save-window-excursion that C-c C-c does"
  (interactive)
  (let* ((info (org-babel-get-src-block-info))
	 (body (nth 1 info)))
    (eval (read (format "(progn %s )" body)))))
   #+END_SRC

** babel: emacs-lisp & window excursion
   Running emacs-lisp src blocks and being able to change windows configurations
   #+BEGIN_SRC emacs-lisp
(defun aod-org/babel-execute:emacs-lisp-advice (orig &rest args)
  (setf aod-temp/save-window-excursion 'save-window-excursion)
  (cl-letf (((symbol-function 'set-window-configuration)
	     (lambda (args)
	       (message "ignoring changes in window configuration"))))
    (apply orig args)))

(setq aod-org/babel-elisp-save-window-excursion t)

(defun aod-org/toggle-babel-elisp-window-excursion ()
  (interactive)
  (setq aod-org/babel-elisp-save-window-excursion
	(not aod-org/babel-elisp-save-window-excursion))
  (if aod-org/babel-elisp-save-window-excursion
      (advice-remove 'org-babel-execute:emacs-lisp #'aod-org/babel-execute:emacs-lisp-advice)
    (advice-add 'org-babel-execute:emacs-lisp :around #'aod-org/babel-execute:emacs-lisp-advice))
  (message (format "Saving window excursion? %s" aod-org/babel-elisp-save-window-excursion)))
   #+END_SRC

** opening links in private/incognito
   #+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'aod.web/browse-function)
(setq aod-web/browse-private-p nil)

(defun aod-web/toggle-browse-private ()
  (interactive)
  (setq aod-web/browse-private-p (not aod-web/browse-private-p))
  (message "openining in private? %s" aod-web/browse-private-p))

(defun aod.web/browse-function (url &rest ignore)
  "Browse URLs in either normal mode or in a firefox private window"
  ;; (interactive "sURL: ")
  (let ((default-directory "~") ; fixing snap chromium & fuse bug
	)
    (if aod-web/browse-private-p
	(progn
	  (message "opening in private firefox window")
	  (shell-command (concat "firefox --private-window " url)))
      (progn
	(message "openining in normal browser window")
	(browse-url-default-browser url))
      )))
   #+END_SRC
** wrap blocks of text
   http://pragmaticemacs.com/emacs/wrap-text-in-an-org-mode-block/
   - [X] indent properly the inserted text
     - (indent-for-tab-command)
     - (newline-and-indent)
     - (indent-new-comment-line)
   
   #+BEGIN_SRC emacs-lisp
(defun aod.org/wrap-region ()
  "Make a template at point."
  (interactive)
  (if (org-at-table-p)
      (call-interactively 'org-table-rotate-recalc-marks)
    (let* ((choices '(("s" . "SRC")
                      ("e" . "EXAMPLE")
                      ("q" . "QUOTE")
                      ("v" . "VERSE")
                      ("c" . "CENTER")
		      ("C" . "COMMENT")
                      ("l" . "LaTeX")
                      ("h" . "HTML")
                      ("a" . "ASCII")))
           (key
            (key-description
             (vector
              (read-key
               (concat (propertize "Template type: " 'face 'minibuffer-prompt)
                       (mapconcat (lambda (choice)
                                    (concat (propertize (car choice) 'face 'font-lock-type-face)
                                            ": "
                                            (cdr choice)))
                                  choices
                                  ", ")))))))
      (let ((result (assoc key choices)))
        (when result
          (let ((choice (cdr result)))
            (cond
             ((region-active-p)
              (let ((start (region-beginning))
                    (end (region-end)))
                (goto-char end)
		(newline-and-indent)
                (insert "#+END_" choice)
		(newline-and-indent)
                (goto-char start)
		;; (newline)
		
		(previous-line)
		(indent-new-comment-line)
                (insert "#+BEGIN_" choice)
		))
             (t
	      (indent-new-comment-line)
              (insert "#+BEGIN_" choice)
	      (newline-and-indent)
              (save-excursion
		(newline-and-indent)
		(insert "#+END_" choice))
	      (indent-for-tab-command)
	      ))))))))

   #+END_SRC
** eval named block
   #+BEGIN_SRC emacs-lisp :results silent
(defun aod.org-babel/eval-named-block (name)
  "Sends the code of the named block into the repl session.
   Requires ober-eval-in-repl package"
  (interactive "sName:")
  (org-save-outline-visibility nil ;; use markers?
    (save-excursion
      (goto-char (org-babel-find-named-block name))
      ;; if there is an active job : interrupt it
      (let* ((info (org-babel-get-src-block-info))
	     (type (nth 0 info))
	     (params (nth 2 info))
	     (session (cdr (assq :session params)))
	     (is-elisp (s-match (rx (or "elisp" "emacs-lisp"))
				type) ))
	(if is-elisp
	    ;; just evaluating.. saves alot of trouble.
	    ;; we don't really need an ielm buffer etc
	    ;; TODO could probably hijack ober-eval-in-repl to use eval as its call function?
	    ;; this would be useful to handle all the expansion of variables etc
	    (let ((body (format "(progn %s )" (nth 1 info))))
	      (eval (read (format body))))
	  ;; else : eval in repl
	  (if (and
	       ;; windows sucks cannot do anything about this
	       (not (eq system-type 'windows-nt))
	       (get-buffer session) (process-running-child-p session))
	      (progn
		(message "There was already a process running, interrupting.. ")
		;; comint-ptyp
		(interrupt-process session comint-ptyp))

	    (ober-eval-block-in-repl)))))))
   #+END_SRC

** buttons for named block
   #+BEGIN_SRC emacs-lisp :results silent
(setq aod.org-babel/button-format "[%s]")

(defmacro aod.org-babel/make-named-block-button (name &optional format)
  (button-lock-mode 1)
  (let* ((button-format (or format aod.org-babel/button-format))
	 (button-name (format button-format name))
	 (button-regexp (regexp-quote button-name))
	 (callback-name (format "aod-button/--%s" (s-replace " " "-" name))))
    `(progn
       ;; the button callback
       (defun ,(intern callback-name) ()
	 "Auto generated button action"
	 (interactive)
	 (aod.org-babel/eval-named-block ,name))
       ;; the button creation with button-lock
       (button-lock-set-button ,button-regexp
			       ',(intern callback-name)
			       :keyboard-binding "RET"
			       :face 'button-lock-button-face
			       :mouse-face 'button-lock-mouse-face
			       :face-policy 'prepend
			       )
       ,button-name)))

(defun aod.org-babel/generate-call-buttons ()
  (interactive)
  (button-lock-mode 1)
  (let ((button-regexp (regexp-quote "#+CALL:")))
    (button-lock-set-button button-regexp
			    'org-babel-execute-maybe
			    :keyboard-binding "RET"
			    :face 'button-lock-button-face
			    :mouse-face 'button-lock-mouse-face
			    :face-policy 'prepend
			    )))

(defun aod.org-babel/generate-named-buttons (&optional blocks)
  "Generates the buttons for all the named src blocks in this org
file.

Pro tip: make an emacs-lisp src block calling this function and
you will get a table with clickable buttons for all the src
blocks"
  (let ((blocks (or blocks (org-babel-src-block-names))))
    (mapcar
     (lambda (name)
       ;; note: i cannot just call the macro.. ugh
       ;; see https://stackoverflow.com/a/11341079
       (eval `(aod.org-babel/make-named-block-button ,name)))
     blocks)))

(defun aod.org-babel/generate-named-buttons-inc (regexp)
  "Generates the buttons for the named src blocks in this org
file that MATCH the given regexp"
  (let ((blocks (xah-filter-list
		 (lambda (x)
		   (s-match regexp x))
		 (org-babel-src-block-names))))
    (aod.org-babel/generate-named-buttons blocks)))

(defun aod.org-babel/generate-named-buttons-exc (regexp)
  "Generates the buttons for the named src blocks in this org
file that DON'T MATCH the given regexp"
  (let ((blocks (xah-filter-list
		 (lambda (x)
		   (not (s-match regexp x)))
		 (org-babel-src-block-names))))
    (aod.org-babel/generate-named-buttons blocks)))
   #+END_SRC

*** COMMENT examples

    #+BEGIN_SRC emacs-lisp
(aod.org-babel/generate-named-buttons)
    #+END_SRC

    #+RESULTS:
    | [dev:run] | [dev:build] | [demo-sh-2] | [demo-sh] |

    #+BEGIN_SRC emacs-lisp
(aod.org-babel/generate-named-buttons-inc "dev")
    #+END_SRC

    #+RESULTS:
    | [dev:run] | [dev:build] |

    #+BEGIN_SRC emacs-lisp
(aod.org-babel/generate-named-buttons-exc "dev")
    #+END_SRC

    #+RESULTS:
    | [demo-sh-2] | [demo-sh] |

    #+NAME: demo-sh
    #+BEGIN_SRC sh
echo demo
    #+END_SRC

    #+NAME: demo-sh-2
    #+BEGIN_SRC sh
echo demo 2
    #+END_SRC

    #+NAME: dev:build
    #+BEGIN_SRC sh
echo dev build
    #+END_SRC

    #+NAME: dev:run
    #+BEGIN_SRC sh
echo dev run
    #+END_SRC
** Getting named src block content

   #+BEGIN_SRC emacs-lisp :results nil
(defun aod.org/src-block-content (name)
  (org-save-outline-visibility nil ;; use markers?
    (save-excursion
      (goto-char (org-babel-find-named-block name))
      (let ((src (org-element-property :value (org-element-at-point))))
	src))))

(defun aod.org/src-block-content-noweb (name)
  (org-save-outline-visibility nil ;; use markers?
    (save-excursion
      (goto-char (org-babel-find-named-block name))
      (org-babel-expand-noweb-references))))
   #+END_SRC

* Workgroups
  #+BEGIN_SRC emacs-lisp :results silent
(defun aod.wg/load-session (session-file)
  (interactive (list
		(read-file-name "session file:"
				(format "%s/.wg/" (projectile-project-root)))))
  (require 'workgroups2)
  (wg-open-session session-file))

(defun aod.wg/save-session (session-file)
  (interactive (list
		(read-file-name "session file:"
				(format "%s/.wg/" (projectile-project-root)))))
  (let ((dir (file-name-directory session-file)))
    (make-directory dir 'create-parents))
  (require 'workgroups2)
  (wg-save-session-as session-file))
  #+END_SRC
* Meson build system
  Adding new =files()=
  - select the directory (it will be prepended in the actual files)
  - the regexp filter for the files in the given directory

  After the selection has be made, the matching files will be inserted with their directory prepended
  #+BEGIN_SRC emacs-lisp :results silent
(defun aod.meson/sources (dir regexp)
  (interactive "GDirectory:\nsRegexp: ")
  (message dir)
  (let* ((filenames (directory-files dir
				     t ; full path
				     regexp ;match
				     nil	;nosort
				     ))
	 (formatted (mapconcat (function (lambda (x)
					   (let ((relative-path (file-relative-name x ".")))
					     (format "'%s',\n" relative-path))))
			       filenames
			       " ")))
    (insert formatted)))
  #+END_SRC

  #+BEGIN_SRC emacs-lisp :results silent
(defun aod.meson/sources-multiple (regexp)
  "Uses helm-read-file-name where you can select multiple file names.
By default the regexp is matching .cpp or .c files.
TODO: if called with a prefix argument ask for the regexp..?"
  (interactive (list
		(rx (or ".cpp" ".c"))))
  (let* ((filenames (helm-read-file-name "files"
					 :marked-candidates t
					 :test (lambda (x)
						 (or (f-directory-p x)
						     (s-match regexp x)))))
	 (formatted (mapconcat (function (lambda (x)
					   (let ((relative-path (file-relative-name x ".")))
					     (format "'%s',\n" relative-path))))
			       filenames
			       " ")))
    (insert formatted)))

  #+END_SRC

* Dekstop  (saving configurations)
  #+BEGIN_SRC emacs-lisp
(defun aod.desktop/save ()
  "Save current project dekstop"
  (interactive)
  (desktop-save (projectile-project-root) t nil 208)
  )

(defun aod.desktop/read ()
  "Save current project dekstop"
  (interactive)
  (desktop-read (projectile-project-root))
  )
  #+END_SRC

  #+RESULTS:
  : aod\.desktop/read
* COMMENT S7 scheme (moved to elisp/aod-s7.el)
  #+BEGIN_SRC emacs-lisp :results silent
(defun aod.s7/get-ns ()
  "Get the (ns some.namespace) part to send on the repl"
  (interactive)
  (save-excursion
    (beginning-of-buffer)
    (if (re-search-forward "\\(\(ns .+\)\\)" nil t)
	(match-string-no-properties 1)
      nil)))
  #+END_SRC

  That if =aod.s7/get-ns= returns non nil, then it returns the =(ns ..)= statement to be run in the repl.
  
  That string should be send to the comint scheme process.
  - modify cmuscheme directly? (dirty)
  - hooks (eg before send?)
* Cache: reading cached file names
  hm.. could make this more generic like a persistent-memoized kind of thing
  
  #+BEGIN_SRC emacs-lisp
(defun aod.cache/read-file-name (prompt)
  (unless (boundp 'aod.cache/files)
    (setq aod.cache/files '()))
  (let ((cached (alist-get (intern prompt) aod.cache/files)))
    (if (and cached
	     (file-exists-p cached))
	cached
      (progn
	;; else: reading file and storing it
	(let ((read (read-file-name (concat prompt ": "))))
	  (add-to-list 'aod.cache/files
		       (cons (intern prompt)
			     read))
	  (customize-save-variable 'aod.cache/files aod.cache/files)
	  read)))))
  #+END_SRC

* aod do helpers: aod.project/defn & transient
  #+begin_src emacs-lisp
(defmacro aod.project/defn (name args &rest body)
  "Defines a function which executes with `default-directory' set
to the project root for where it was defined"
  (let ((root (project-root (project-current))))
    `(defun ,name
	 ,args
       (interactive)
       (let ((default-directory ,root))
	 ,@body))))

(defmacro aod.project/defn-with-root (name args &rest body)
  "Defines a function which executes with `default-directory' set
to the project root for where it was defined"
  (let ((root (project-root (project-current))))
    `(defun ,name
	 ,args
       (interactive)
       (let ((default-directory ,root))
	 ,@body))))

(defmacro aod.transient/defvar (var default doc reader)
  `(progn
     (defvar ,var ,default
       (format "Defined with `aod.transient/defvar': %s ",doc))
     (transient-define-argument ,var ()
       :description ,doc
       :class 'transient-lisp-variable
       :variable ',var
       :reader ,reader)))
  #+end_src

* mark region
  #+begin_src emacs-lisp
(defun aod/mark-region (start end)
  (set-mark start)
  (goto-char end))
  #+end_src

  #+RESULTS:
  : aod/mark-region
