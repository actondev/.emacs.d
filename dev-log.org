* TODO <2019-11-10 Sun> use-package always ensure bug?
  Had =(setq use-package-always-ensure t)= yet (when deleted from elpa directory the eval-in-repl) i got errors that it couldn't load these packages.

  Fixed when added manually =:ensure t=
* <2019-11-10 Sun> merged to master the eval in repl extensions
  I had an open PR for https://github.com/kaz-yos/eval-in-repl and https://github.com/diadochos/org-babel-eval-in-repl . Until they got merged this is how I was using my version locally
  #+BEGIN_SRC emacs-lisp
(use-package eval-in-repl
  :straight
  (eval-in-repl
   ;; :depth 'full
   :type git :host github :repo "kaz-yos/eval-in-repl"
   :fork (:host github :repo "actondev/eval-in-repl" :branch "feature/multiple_sh_sessions"))
  )

(use-package org-babel-eval-in-repl
  :straight
  (org-babel-eval-in-repl
   ;; :depth 'full
   :type git :host github :repo "diadochos/org-babel-eval-in-repl"
   :fork (:host github :repo "actondev/org-babel-eval-in-repl" :branch "feature/multiple_sh_sessions"))
  :bind
  (:map org-mode-map
	("C-<return>" . ober-eval-in-repl)))
  #+END_SRC

  Note: I probably could have used a local path with use-package instead of straight like this (irrelevant extension, code only for reference)

  #+BEGIN_SRC emacs-lisp
(use-package hideshow-org
  :load-path "elisp/"
  ;; :demand t
  :hook (prog-mode . hs-org/minor-mode))
  #+END_SRC
** quelpa: failed me?
   I tried the following with quelpa, but I was getting errors. don't know
   #+BEGIN_SRC emacs-lisp
(use-package eval-in-repl
  :quelpa (eval-in-repl
	   :fetcher git
	   :url "https://github.com/actonDev/eval-in-repl.git"
	   :branch "feature/multiple_sh_sessions"))
   #+END_SRC
* <2019-11-11 Mon> magit ediff colors in doom-molokai

  '(ediff-current-diff-A ((t (:background "#8b0000" :foreground "#CCC"))))
  '(ediff-current-diff-B ((t (:background "#008b00" :foreground "#CCC"))))
  '(ediff-current-diff-C ((t (:inherit ediff-current-diff-A :background "#8b5a00" :foreground "#CCC"))))

  '(rainbow-delimiters-depth-1-face ((t (:foreground "#e91e63"))))
  '(rainbow-delimiters-depth-2-face ((t (:foreground "#2196F3"))))



  ;; A head (last commit)
  (set-face-attribute 'ediff-current-diff-A nil
  :background "#8b0000"
  :foreground "#CCC")
  ;; B index (stage)
  (set-face-attribute 'ediff-current-diff-B nil
  :background "#008b00"
  :foreground "#CCC")
  ;; C working tree
  (set-face-attribute 'ediff-current-diff-C nil
  :background "#8b5a00"
  :foreground "#CCC")
* <2019-11-11 Mon> rainbow-delimitires colors
  '(rainbow-delimiters-depth-1-face ((t (:foreground "#e91e63"))))
  '(rainbow-delimiters-depth-2-face ((t (:foreground "#2196F3"))))
  '(rainbow-delimiters-depth-3-face ((t (:foreground "#EF6C00"))))
  '(rainbow-delimiters-depth-4-face ((t (:foreground "#B388FF"))))
  '(rainbow-delimiters-depth-5-face ((t (:foreground "#76ff03"))))
  '(rainbow-delimiters-depth-6-face ((t (:foreground "#26A69A"))))
  '(rainbow-delimiters-depth-7-face ((t (:foreground "#FFCDD2"))))
  '(rainbow-delimiters-depth-8-face ((t (:foreground "#795548"))))
  '(rainbow-delimiters-depth-9-face ((t (:foreground "#DCE775")))))
* <2019-11-20 Wed> restclient once more :)
  while working on the eval-ritmos app, i realised it's necessary once more!
* <2019-11-26 Tue> function to insert source code block and edit
  https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes
  #+BEGIN_SRC emacs-lisp
(defun aod-org-insert-src (mode)
  "Insert a new source block and start editing it in its own editor
  TODO
  - see auto-mode-alist : would be nice to have completion for the mode"
  (interactive "sMode:")
  (message (format "selected mode %s" mode))
  (indent-according-to-mode)
  (insert (format "#+BEGIN_SRC %s" mode))
  (newline)
  (save-excursion
    (newline-and-indent)
    (insert "#+END_SRC"))
  (org-edit-special))
  #+END_SRC
* <2020-03-16 Mon> commiting..
  had the following in my init, but removed (have related code in the config.org)
  #+BEGIN_SRC emacs-lisp
;; backup directory https://www.emacswiki.org/emacs/BackupDirectory
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist   ; backup saves will be at .emacs.d/backup
 `(("." . ,(expand-file-name "backup" user-emacs-directory)))
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups

  #+END_SRC
* <2021-04-18 Sun> org repl mode, orgc-block-regexp etc

** orgc-block-regexp
   #+begin_src emacs-lisp
;; is the orgc-block-regexp
"^[ \t]*#\\+begin_?\\([^ \n]+\\)\\(\\([^\n]+\\)\\)?\n\\([^\000]+?\\)#\\+end_?\\1[ \t]*$" 
;; some modifications
"^[ \t]*#\\+begin_src\\(\\([^\n]+\\)\\)?\n\\([^\000]+?\\)#\\+end_src[ \t]*$"
"^[ \t]*#\\+begin_src\\([^\n]*\\)?\n\\([^\000]+?\\)#\\+end_src[ \t]*$"
;; What ist this [^\000] regexp??
;; this last one seems the most correct
"^[ \t]*#\\+begin_src\\([^\n]*\\)?\n\\([\0-\377[:nonascii:]]+?\\)\n[ \t]*#\\+end_src[ \t]*$"  
   #+end_src
** font-lock
   - https://stackoverflow.com/a/10035494/8720686

   #+begin_src emacs-lisp
(font-lock-add-keywords nil aod-repl/font-lock-keywords)
;; .. the keywords was adding help-echo
;; then..
(font-lock-remove-keywords nil aod-repl/font-lock-keywords)
   #+end_src

   That wasn't working and had manually to
   #+begin_src emacs-lisp
(remove-text-properties (point-min) (point-max) '(help-echo))   
   #+end_src

   But, that's cause I had to also 
   #+begin_src emacs-lisp
(make-local-variable 'font-lock-extra-managed-props)
(push 'help-echo font-lock-extra-managed-props)   
   #+end_src
** org-fontify-meta-lines-and-blocks-1
   - [[file:/usr/share/emacs/27.1/lisp/org/org.el.gz::defun org-fontify-meta-lines-and-blocks]]
   - added in org-font-lock-extra-keywords
     at org-set-font-lock-defaults [[file:/usr/share/emacs/27.1/lisp/org/org.el.gz::defun org-set-font-lock-defaults ()]]
     #+begin_src emacs-lisp
(let org-font-lock-extra-keywords (list 
;; ..
'(org-fontify-meta-lines-and-blocks)
))

;;;

(setq-local font-lock-defaults
		'(org-font-lock-keywords t nil nil backward-paragraph))
     #+end_src

     that function calls
     (org-src-font-lock-fontify-block lang block-start block-end)
     [[file:/usr/share/emacs/27.1/lisp/org/org-src.el.gz::defun org-src-font-lock-fontify-block (lang start end)]]

* setq-local, and interactive: making CAPS_LOCKED_LOCAL_VARS
  #+begin_src emacs-lisp
(comment "how can I make a keymap that lowercase->uppsercase to
read from the mini buffer?"
	 (defvar aod.eir/caps-lock-keymap
	   (make-sparse-keymap (keymap
				(mapcar (lambda (c)
					  (cons c #'backward-char)
					  )
					
					(-iota (- 122 97) 97)))))
	 (mapcar (lambda (c)
		   (cons c backward-char)
		   )
		 
		 (-iota (- 122 97) 97))

	 (read-from-minibuffer "Input: " nil aod.eir/caps-lock-keymap)
	 )  
  #+end_src
* TODO repl & edit src block
  when entering the "edit src block" (with ~C-c '~) the local variable =org-src--babel-info= is set
  - in org-edit-src-code
    =(setq org-src--babel-info babel-info)=
* TODO evaluate, results on drawer?
  https://github.com/diadochos/org-babel-eval-in-repl/issues/37
  - org-babel-execute-src-block
  - 
* DONE <2021-07-14 Wed> text overlay highlight
  https://emacsnotes.wordpress.com/2018/10/26/highlight-text-not-with-faces-but-with-other-texts/

  added aod/highlight-regexp-with-string

* helm: exit with no input (nil)
  no idea
  #+begin_src emacs-lisp
;; TODO how to exit with nil/empty string?
(define-key helm-map (kbd "C-q")
  (lambda () (interactive)
    (message "here?")
    (setq helm-exit-status 0)
    (message "minibuff before %s" (minibuffer-contents))
    (delete-minibuffer-contents)
    (message "minibuff %s" (minibuffer-contents))
    ;; (helm-exit-minibuffer)
    (exit-minibuffer)
    ))
  #+end_src

  
* DONE macos: minibuffer focus
  just using emacs-plus@29 (29.0.50)
  #+begin_src emacs-lisp
(global-set-key (kbd "<f9>") #'switch-to-minibuffer)
(global-set-key (kbd "<f9>") #'abort-minibuffers)

(global-set-key (kbd "C-<f9>") (lambda ()
				 (interactive)
				 (message "active minibuffer: minibuffer %s , window-buffer: %s"
					  ;;1 2
					    (active-minibuffer-window) (window-buffer)
					  )
				 ;; (other-window 1)
				 (switch-to-minibuffer)
				 ;;(other-window -1)
				 '(message "now active minibuffer: minibuffer %s , window-buffer: %s"
					  ;;1 2
					    (active-minibuffer-window) (window-buffer)
					  )
				 ))

(remove-hook 'minibuffer-setup-hook (lambda () (message (message "active minibuffer: minibuffer %s , window-buffer: %s"
					  ;;1 2
					    (active-minibuffer-window) (window-buffer)
					  ))))

(add-hook 'minibuffer-exit-hook (lambda () (message "minibuffer exit")))

(defun my-advice (&rest args)
  (message "select window %s, backtrace %s " (window-buffer)  (seq-take (cddr (backtrace-get-frames 'my-advice)) 3))
  )

(defun my-advice (&rest args)
  (let ((trace-funs (mapcar (lambda (el)
			      (let ((fun (backtrace-frame-fun el)))
				(if (symbolp fun) fun
				  'anonymous)))
			    (backtrace-get-frames))))
    (message "\n\nselected window %s\nbacktrace %s" (window-buffer)
	     
	     (take-after trace-funs 'my-advice)
	     ;;(seq-take (cddr (backtrace-get-frames 'my-advice)) 3)
	     ))
  
  )

(my-advice)

(advice-add 'select-window :after  #'my-advice)

(advice-remove 'select-window  #'my-advice)

(defun take-after (seq el)
  (let ((found nil))
    (while (and (not found))
      seq
      (when (eq (car seq) el)
	(setq found t))
      (setq seq (cdr seq))))
  seq)

(setq foo (mapcar #'backtrace-frame-fun (backtrace-get-frames)))

foo

(seq-filter #'symbolp foo)

(seq-take (take-after foo 'mapcar) 5)

(eq (car foo) 'backtrace-get-frames)

(backtrace-frame-fun (car (backtrace-get-frames)))

(type-of (car (backtrace-get-frames)))



(add-to-list 'window-selection-change-functions #'my-advice)
(remove #'my-advice window-selection-change-functions)

  #+end_src

  - window-selection-change-functions
  - 
  
** log
   - in messages
   - running =M-x=
   #+begin_quote
Mark set [2 times]
select window *Messages*
select window  *Minibuf-1* [2 times]
select window *vterm* [3 times]
select window  *Minibuf-1*
select window *vterm*
select window  *Minibuf-1*
select window *shell* [3 times]
select window  *Minibuf-1*
select window *shell*
select window  *Minibuf-1*
select window *shell* [4 times]
select window  *Minibuf-1*
select window *shell* [2 times]
select window  *Minibuf-1*
select window *shell* [2 times]
select window  *Minibuf-1*
select window *shell*
select window  *Minibuf-1*
select window *shell*
select window *vterm* [4 times]
select window *shell*
select window *vterm* [2 times]
select window *shell* [4 times]
select window *vterm*
select window *shell* [2 times]
select window *vterm*
select window *shell* [7 times]
select window *vterm*
select window *shell* [4 times]
select window *vterm*
select window *shell* [2 times]
select window *vterm*
select window *shell* [3 times]
select window *vterm*
select window *shell*
select window *vterm* [7 times]

-- until here --

windmove-do-window-select: No window up from selected window
active minibuffer: minibuffer #<window 4 on  *Minibuf-1*> , window-buffer: *vterm*
   #+end_quote


   
